/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Prognoza;
import domen.PrognozaRegion;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import kontroler.Kontroler;
import modeli.ModelTabelePrognoza;
import niti.OsveziNit;
import niti.PokreniServerNit;
import pomoc.PomocnaKlasa;

/**
 *
 * @author Gogic
 */
public class GlavnaServerskaForma extends javax.swing.JFrame {

    /**
     * Creates new form GlavnaServerskaForma
     */
    public GlavnaServerskaForma() {
        initComponents();
        this.setLocationRelativeTo(null);
        PokreniServerNit psn = new PokreniServerNit();
        psn.start();
        try {
            srediTabelu();
        } catch (ParseException ex) {
            System.out.println("Losi datumi");
            Logger.getLogger(GlavnaServerskaForma.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        OsveziNit os = new OsveziNit(this);
        os.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrognoza = new javax.swing.JTable();
        chkOd = new javax.swing.JCheckBox();
        chkDo = new javax.swing.JCheckBox();
        txtOd = new javax.swing.JTextField();
        txtDo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblPrognoza.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPrognoza);

        chkOd.setText("Dan od");

        chkDo.setText("Dan do");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1017, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkOd)
                            .addComponent(chkDo))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOd)
                            .addComponent(txtDo))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkOd)
                    .addComponent(txtOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDo)
                    .addComponent(txtDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlavnaServerskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlavnaServerskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlavnaServerskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlavnaServerskaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GlavnaServerskaForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkDo;
    private javax.swing.JCheckBox chkOd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrognoza;
    private javax.swing.JTextField txtDo;
    private javax.swing.JTextField txtOd;
    // End of variables declaration//GEN-END:variables

    public void srediTabelu() throws ParseException {
        ModelTabelePrognoza mtp = new ModelTabelePrognoza();
        tblPrognoza.setModel(mtp);
        
        ArrayList<Prognoza> listaPrognoza = kontroler.Kontroler.getInstance().vratiPrognoze();
        ArrayList<PomocnaKlasa> listaPK  = new ArrayList<>();
        
        for (Prognoza prognoza : listaPrognoza) {
            int id = prognoza.getPrognozaID();
            ArrayList<PrognozaRegion> listaPR = Kontroler.getInstance().vratiPrognozeRegionSaID(id);
            PomocnaKlasa pk = new PomocnaKlasa(listaPR, prognoza);
            listaPK.add(pk);
        }
        
        mtp.setLista(listaPK);
        
        
        if(chkOd.isSelected()){
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date datum = sdf.parse(txtOd.getText());
            ArrayList<PomocnaKlasa> lista2 = new ArrayList<>();
            for (PomocnaKlasa pomocnaKlasa : listaPK) {
                if(pomocnaKlasa.getPrognoza().getDan().after(datum)){
                    lista2.add(pomocnaKlasa);
                }
            }
            
            mtp.setLista(lista2);
        }
        
         if(chkDo.isSelected()){
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date datum = sdf.parse(txtDo.getText());
            ArrayList<PomocnaKlasa> lista2 = new ArrayList<>();
            for (PomocnaKlasa pomocnaKlasa : listaPK) {
                if(pomocnaKlasa.getPrognoza().getDan().before(datum)){
                    lista2.add(pomocnaKlasa);
                }
            }
            
            mtp.setLista(lista2);
        }

         
         if(chkDo.isSelected() && chkOd.isSelected()){
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date datumDo = sdf.parse(txtDo.getText());
            Date datumOd = sdf.parse(txtOd.getText());
            
            ArrayList<PomocnaKlasa> lista2 = new ArrayList<>();
            for (PomocnaKlasa pomocnaKlasa : listaPK) {
                if(pomocnaKlasa.getPrognoza().getDan().before(datumDo) && pomocnaKlasa.getPrognoza().getDan().after(datumOd)){
                    lista2.add(pomocnaKlasa);
                }
            }
            
            mtp.setLista(lista2);
            
            
         }
        
        
    }
}
